name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  FINAL_VERSION: "1.3.1"

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.platform.os_name }} with rust ${{ matrix.toolchain }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os_name: Android-aarch64
            os: ubuntu-24.04
            target: aarch64-linux-android
            bin: main-linux-android-arm64
          - os_name: Linux-aarch64
            os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            bin: main-linux-arm64
          - os_name: Linux-x86_64
            os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            bin: main-linux-amd64
          - os_name: Linux-i686
            os: ubuntu-24.04
            target: i686-unknown-linux-musl
            bin: main-linux-i686
          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: main-amd64.exe
          - os_name: Windows7-x86_64
            os: windows-latest
            target: x86_64-win7-windows-msvc
            bin: main7-amd64.exe
          - os_name: Windows-i686
            os: windows-latest
            target: i686-pc-windows-msvc
            bin: main-i686.exe
          - os_name: Windows7-i686
            os: windows-latest
            target: i686-win7-windows-msvc
            bin: main7-i686.exe
        toolchain:
          - stable
    steps:
    - uses: actions/checkout@v3
    - name: Dependency
      if: matrix.platform.os_name == 'Linux-i686'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt update
        sudo apt install build-essential gcc-multilib gcc-mingw-w64 libc6-dev-i386 libssl-dev:i386 libgcc-9-dev-i386-cross -y
        sudo apt install build-essential gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross libstdc++6-arm64-cross
        sudo apt install gcc-i686-linux-gnu g++-i686-linux-gnu libc6-dev-i386-cross libstdc++6-i386-cross
        sudo apt install llvm-dev libclang-dev clang libgcc-9-dev-arm64-cross
        sudo apt install cmake g++-multilib gcc-multilib

    - name: Convert
      if: matrix.platform.os_name == 'Linux-aarch64'
      run: |
        sudo apt install build-essential gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross libstdc++6-arm64-cross
        sudo apt install llvm-dev libclang-dev clang libgcc-9-dev-arm64-cross
        sudo apt install cmake g++-aarch64-linux-gnu gcc-aarch64-linux-gnu
        clang --version

    - name: Convert2
      if: matrix.platform.os_name == 'Windows-x86_64' || matrix.platform.os_name == 'Windows-i686' || matrix.platform.os_name == 'Windows7-x86_64' || matrix.platform.os_name == 'Windows7-i686'
      run: |
        choco install nasm

    - name: Build binary Linux
      if: matrix.platform.os_name == 'Linux-x86_64' || matrix.platform.os_name == 'Linux-i686' || matrix.platform.os_name == 'Linux-aarch64'
      run: |
        rustup target add ${{ matrix.platform.target }}
        cargo +stable build --release --target ${{ matrix.platform.target }}

    - name: Build binary (Windows 10+)
      uses: houseabsolute/actions-rust-cross@v0
      if: matrix.platform.os_name == 'Windows-x86_64' || matrix.platform.os_name == 'Windows-i686' || matrix.platform.os_name == 'Windows-aarch64'
      with:
        command: "build"
        target: ${{ matrix.platform.target }}
        toolchain: ${{ matrix.toolchain }}
        args: "--release"
        strip: true
    - name: Build for Android-NDK
      if: matrix.platform.os_name == 'Android-aarch64'
      run: |
        cargo install cargo-ndk
        rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android
        cargo ndk -t armeabi-v7a -t arm64-v8a build --release

    - name: Build binary (Windows 7+ 64bit)
      if: matrix.platform.os_name == 'Windows7-x86_64'
      run: |
        rustup toolchain install nightly-x86_64-pc-windows-msvc
        rustup target add x86_64-win7-windows-msvc --toolchain nightly-x86_64-pc-windows-msvc
        rustup component add rust-src --toolchain nightly-x86_64-pc-windows-msvc
        cargo +nightly-x86_64-pc-windows-msvc build --release -Z build-std=std,panic_abort --target x86_64-win7-windows-msvc

    - name: Build binary (Windows 7+ 32bit)
      if: matrix.platform.os_name == 'Windows7-i686'
      run: |
        choco install llvm --x86 --force
        ls -R "C:\Program Files (x86)\LLVM\bin"
        ls -R "C:\Program Files\LLVM\bin"
        $env:LIBCLANG_PATH="C:\Program Files (x86)\LLVM\bin"
        rustup toolchain install nightly-i686-pc-windows-msvc
        rustup target add i686-win7-windows-msvc --toolchain nightly-i686-pc-windows-msvc
        rustup component add rust-src --toolchain nightly-i686-pc-windows-msvc
        cargo +nightly-i686-pc-windows-msvc build --release -Z build-std=std,panic_abort --target i686-win7-windows-msvc

    - name: Run tests
      run: ls -R

    - name: Rename binary (linux and macos)
      run: mv target/${{ matrix.platform.target }}/release/main target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
      if: matrix.platform.os_name == 'Linux-x86_64' || matrix.platform.os_name == 'Linux-i686' || matrix.platform.os_name == 'Linux-aarch64' || matrix.platform.os_name == 'Android-aarch64'
    - name: Rename binary (windows)
      run: mv target/${{ matrix.platform.target }}/release/main.exe target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
      if: matrix.platform.os_name == 'Windows-x86_64' || matrix.platform.os_name == 'Windows-i686' || matrix.platform.os_name == 'Windows7-x86_64' || matrix.platform.os_name == 'Windows7-i686'

    - name: Generate SHA-256
      run: shasum -a 256 target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }} | cut -d ' ' -f 1 > target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}.sha256
    - name: Release binary and SHA-256 checksum to GitHub
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.FINAL_VERSION }}
        files: |
          target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
