//This Is a first version of get_vouchers_by_collections
//This version using api reqwest
//Whats new In 1.0.1 :
//Integrated feature gzip, HTTP_2, TLS with use_rustls_tls using reqwest

use reqwest;
use reqwest::ClientBuilder;
use std::io;
use serde::Serialize;
use serde_json;
use anyhow::Result;
use reqwest::Version;

#[derive(Serialize)]
struct JsonRequest {
    voucher_collection_request_list: Vec<VoucherCollectionRequest>,
}

#[derive(Serialize)]
struct VoucherCollectionRequest {
    collection_id: String,
    component_type: i64,
    component_id: i64,
    limit: i64,
    microsite_id: i64,
    offset: i64,
    number_of_vouchers_per_row: i64,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Input nilai start dan akhir
    let mut start = String::new();
    let mut end = String::new();
	
	println!("get_vouchers_by_collections [Version 1.0.1]");
	println!("");
	println!("Dapatkan Info terbaru di https://google.com");
	println!("");
	println!("Contoh input: Awal: 12905192072, Akhir: 12905192100");
    println!("Masukkan nilai start:");
    io::stdin().read_line(&mut start).expect("Gagal membaca baris");

    println!("Masukkan nilai akhir:");
    io::stdin().read_line(&mut end).expect("Gagal membaca baris");

    // Parse nilai start dan akhir ke dalam tipe data integer
    let start: i64 = start.trim().parse().expect("Input tidak valid");
    let end: i64 = end.trim().parse().expect("Input tidak valid");

    // Jumlah nilai per batch
    let values_per_batch = 5;

    // Hitung jumlah batch
    let batch_count = ((end - start) / 128 / values_per_batch) + 1;

    // Iterasi dan menuliskan angka dengan jarak 128
    let mut batch_number = 1;
    let mut current = start;

    for _ in 0..batch_count {
        println!("Batch {} of {}", batch_number, batch_count);

        for _ in 0..values_per_batch {
            // Bentuk struct VoucherCollectionRequest
            let voucher_request = VoucherCollectionRequest {
                collection_id: current.to_string(),
                component_type: 2,
                component_id: 1694165901230,
                limit: 1,
                microsite_id: 58982,
                offset: 0,
                number_of_vouchers_per_row: 1,
            };
			
			let mut headers = reqwest::header::HeaderMap::new();
			headers.insert("sec-ch-ua", reqwest::header::HeaderValue::from_static("\"Chromium\";v=\"119\", \"Not)A;Brand\";v=\"24\", \"Google Chrome\";v=\"119\""));
			headers.insert("x-sap-access-f", reqwest::header::HeaderValue::from_static("3.2.119.2.0|13|3.3.0-2_5.1.0_0_343|3f8e71489e604fe39d386d8a6810764f4b299d79ad9a4d|10900|1100"));
			headers.insert("x-sz-sdk-version", reqwest::header::HeaderValue::from_static("3.3.0-2&1.6.8"));
			headers.insert("x-shopee-language", reqwest::header::HeaderValue::from_static("id"));
			headers.insert("x-requested-with", reqwest::header::HeaderValue::from_static("XMLHttpRequest"));
			headers.insert("x-sap-access-t", reqwest::header::HeaderValue::from_static("1694342213"));
			headers.insert("af-ac-enc-dat", reqwest::header::HeaderValue::from_static("AAczLjMuMC0yAAABjD2/+9wAAA+nAyAAAAAAAAAAAv0CU/YKNLZ3x+BnWz70VZfkPeXOl/82EyfDx/bVRcPaaRvYm5f/NhMnw8f21UXD2mkb2JseRmK2cCMhvxPnkQMgYOR3MdO0gnVkjIgJW23lZmQ6sCWooZQKR7gDVwwCOYI1dY53Klz0SQJAiMqSWXTebQiMBSCy14MigrBSynoPM/sJ55f/NhMnw8f21UXD2mkb2Jtn/ITcW+wLKZcVOXYrFuPG8oyOVk+CDzd2jz4zfQgqkxN5QCFuh0m2a7iQsFUA38jt78nvQtHCyYkKdmCs2BOm0RySdhyhKzToeXrsCr/7VgmrRqWZ6CUplt6oFbQx+d+S131dA11Iyo+it+R0CjI1jVVTM0ZXbzLLjOMDkk0u56JlVsxG5BkGVyzOLMyu0PDy2k1+VdkT4pgXk5lHU3OPYXlO2iSYnkJub+qCrFiPR7t/x/v9SPKXNqWKS7oOCZ9xcVTz7HDD3cgFNYM1SCF4KX0sQZdHIFpWrefIgEZDRt7bpc6e6UvvoL4f9+4rwqv23iZus44hunvXxHju3CIGekVQqyQYHKRy3gkwLDX1fSh6bAojldn5JgJweNxrodaDu4ubLr4bcUOLBA2c2bmdlgH+2CNyd5v6F9lcOXQq5szoUhKAg6vJXYPkXE5ho+pc0XG8frvsLhQK78fs7www8WJ6JV771K7M3S4Ty2Ncm8vFui5C+Cokhc47s9IEFIsGDUtpEpNSSI0oOt3tagOTHkenEhnNI10zaevKlBjvvsvFui5C+Cokhc47s9IEFIsGDUtpEpNSSI0oOt3tagOTUWJy02xIVh23BkGRTuyWQfap+xOCy0qf6FceYCNc1JRGrbfJWuRYlFp+J0tcUk6vRQg7nCQX6c8aLMHSU1udIlj4f3pW05can3G4luWGcOFGrbfJWuRYlFp+J0tcUk6vMzJkOKM7a6hSXhvQxqV9Gr75OCXRj3ppyFQjfu1/3QAwDau2Xiuafq3FAfj0VLRrH3wBwU+KzLIFlwnnaaSPkUHfwoKFdwD4S3t6s0u0cnMeoZffwAq9Vd5qYWkImDtWIq9wd+MfTC4cdHCfaUSI7Q=="));
			headers.insert("x-sap-access-s", reqwest::header::HeaderValue::from_static("LwGv74_7pqcgSlOERyAuF3XJ4Xw9IZ6gWvo_ZdVuFJA="));
			headers.insert("x-csrftoken", reqwest::header::HeaderValue::from_static("6du999g4UlXCglP4gjLi1wp6RzWoa4BW"));
			headers.insert("sec-ch-ua-platform", reqwest::header::HeaderValue::from_static("\"Windows\""));
			headers.insert("x-sap-sec", reqwest::header::HeaderValue::from_static("kDXjm6XKbFr0xFr0ZJr+xFN0ZJr0xFN0xFr7xFr0uFp0xDjKxFOaxmr0ZFr0x1fAr0b+xFr0eF50x1j2xFPIDZAA+FkzOI22AYpdVDxPaBB5QSI5j9U3mrFs9tDTUeoMYq3vGOSVZet5IaRgpFKPx1Er7/d8Rb9kxcl6yBWBZbMNSTZCd4adh1HH0bhfVHZkidUCgGqjr45Jzx1JVnmPNZcJ+ehT/nAFH7xt16ef1OF6zzDYBZEe3Fy1DlrEB+ReGk8T2J0PUm7NOtCLUmbqvGLcTPgDjBqf1S0ffGWTwTmvx8tkwThmeS9h7DMdv57LbEvhRBhkGbGmYnYmjdfgykMGjvg3dDNzCtHPPyQWiFk324WM0JIt4ORp3VNqh8Z4bgsgluTEjauT+IvbjDdJDhTl2K5vKC0NCCgtrtRTqnfwBge0+ZB0iHfYHpFCOxTLo0aJNa1eLjBvhT4oGPgKEHGfe0RDkCi+KT1DdspJEccEn3KGBi7q8iUzz0HSwH/x0RVrtHaHnZBdC2oxhs++qJSqKu0p6sFUQe6IeUW+WiHlfINlkFslqdFFr7zmxgfXhRzHGR7cIp2yUWdNbhddLp95LPq13zttiDUQb5KzMB3fcxQgv4Xc32c1Sx7gCvMLovrcGsiKxFGmsDfS5TfzEanxiN5zUgJ1XSj+xFr0fdRVFr0xg4N0xFr00qxFrcX0xFr4xFr0GFr0xXtU9cqzp1ZLM0zpHTYuuskNWjpzaFr0xT+CfdNUF40wxFr0xtfFr0b+xFr0wFr0xDN0xFO9BImbC+SDBfZuZziUGD52wjmeOJX0xFkGFj4wFTTbDmr0xFr+xFj0aFr7xFX0xFr+xFr0wFr0xDN0xFOmsOpUxzmjjqTe2jVcMkU3QpdGEmX0xFrtgdRnfdRufJr0xFO="));
			headers.insert("sec-ch-ua-mobile", reqwest::header::HeaderValue::from_static("?0"));
			headers.insert("user-agent", reqwest::header::HeaderValue::from_static("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"));
			headers.insert("x-api-source", reqwest::header::HeaderValue::from_static("pc"));
			headers.insert("content-type", reqwest::header::HeaderValue::from_static("application/json"));
			headers.insert("accept", reqwest::header::HeaderValue::from_static("application/json"));
			headers.insert("af-ac-enc-sz-token", reqwest::header::HeaderValue::from_static("lj8lxW5yC9lVpibT8q9XTg==|AmHEhmxi3VLUjiLZK36ijddqFKkQEEXwRzQP6Pl51O4qjuvfY5uaef5NPmOLUg1k8u2EQJK+D1AOfA==|G5S/HOQsZ/y6oV9K|08|3"));
			headers.insert("origin", reqwest::header::HeaderValue::from_static("https://shopee.co.id"));
			headers.insert("sec-fetch-site", reqwest::header::HeaderValue::from_static("same-origin"));
			headers.insert("sec-fetch-mode", reqwest::header::HeaderValue::from_static("cors"));
			headers.insert("sec-fetch-dest", reqwest::header::HeaderValue::from_static("empty"));
			headers.insert("referer", reqwest::header::HeaderValue::from_static("https://shopee.co.id/m/9-9"));
			headers.insert("accept-encoding", reqwest::header::HeaderValue::from_static("gzip, deflate"));
			headers.insert("accept-language", reqwest::header::HeaderValue::from_static("en-US,en;q=0.9,id;q=0.8"));
			headers.insert("cookie", reqwest::header::HeaderValue::from_static("_gcl_au=1.1.382895766.1701842686; _fbp=fb.2.1701842691021.1310711933; csrftoken=6du999g4UlXCglP4gjLi1wp6RzWoa4BW; SPC_T_ID=zxmBdsMkJf0JrJYb/fH+h2aLJHiJlniaIzp/YKKftEr58nHwWTnM1CsBwx4+KXnFYdiHxa+ZRCFt17d7fKBGn0Xd8K1dh67XEBsYAi02R2EY3mFneKXqzvs7IiOx+1sIIUA4mYdzcLCq5s3HsNzEMC1GbII8Y6fhOmmW0JHrNlI=; SPC_T_IV=eUo1eDhuUFZXYmFrUlVzYg==; SPC_SI=dLVlZQAAAABnWmNETjdYaedW8wEAAAAARGNnSUY0UU8=; SPC_SEC_SI=v1-VFdwQWtKMEJSanpESG5YbKoZSxOwHRRcX9tsgXXx+YLXTFSj17OKTCJWR9Q4w1MzHYNZnBWmkFGVcHFuaxpY0upssGE4CRi4NpYkp4uKOtk=; SPC_F=P3NAEJyx6FrqDzEGATbu7dDcMBjd9JXc; REC_T_ID=6058df72-93fd-11ee-aef1-160ef2fd0f49; SPC_R_T_ID=zxmBdsMkJf0JrJYb/fH+h2aLJHiJlniaIzp/YKKftEr58nHwWTnM1CsBwx4+KXnFYdiHxa+ZRCFt17d7fKBGn0Xd8K1dh67XEBsYAi02R2EY3mFneKXqzvs7IiOx+1sIIUA4mYdzcLCq5s3HsNzEMC1GbII8Y6fhOmmW0JHrNlI=; SPC_R_T_IV=eUo1eDhuUFZXYmFrUlVzYg==; _sapid=9828cd7f-e1b2-4256-9828-99a6b3efb943; _QPWSDCXHZQA=bd732eff-ea0f-4c0a-ca6a-9188baf7bdd0; AMP_TOKEN=%24NOT_FOUND; _gid=GA1.3.821131696.1701842730; REC7iLP4Q=579d0f13-cb4c-4825-8fed-682eb0238550; _ga=GA1.1.1353849714.1701842727; _ga_SW6D8G0HXK=GS1.1.1701842726.1.1.1701843039.53.0.0; _dc_gtm_UA-61904553-8=1; shopee_webUnique_ccd=Zsb5nVV%2B6wGN2pm7Ic7qNA%3D%3D%7CBWHEhmxi3VLUjiLZK36ijddqFKkQEEXwRzQP6M%2Bdqu4qjuvfY5uaef5NPmOLUg1k8u2EQJK%2BD1AOfA%3D%3D%7CG5S%2FHOQsZ%2Fy6oV9K%7C08%7C3; ds=13436558835865e6f33fd384ad92fd3f"));

            // Bentuk struct JsonRequest
            let json_request = JsonRequest {
                voucher_collection_request_list: vec![voucher_request],
            };

            // Convert struct to JSON
            let json_body = serde_json::to_string(&json_request)?;

			let client = ClientBuilder::new()
				.gzip(true)
				.use_rustls_tls() // Use Rustls for HTTPS
				.build()?;

            // Buat permintaan HTTP POST
            let response = client
                .post("https://shopee.co.id/api/v1/microsite/get_vouchers_by_collections")
                .header("Content-Type", "application/json")
                .headers(headers)
                .body(json_body)
				.version(Version::HTTP_2) 
                .send()
                .await?;
			// Check for HTTP status code indicating an error
			let http_version = response.version();
			println!("HTTP Version: {:?}", http_version);
			println!("Status: {}", response.status());
			println!("{}", response.text().await?);

            // Tingkatkan nilai current untuk batch berikutnya
            current += 128;
        }

        println!();
        batch_number += 1;
    }

    // Tunggu input dari pengguna sebelum keluar
    println!("Tekan 'Enter' untuk keluar.");
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Gagal membaca baris");
	
    Ok(())
}